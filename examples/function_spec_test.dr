// DataRust Function Specification Test
// Tests all the features from the specification

// ===== Test 1: Functions with different return types =====

fn get_int() -> i32 {
    42
}

fn get_fast_int() -> fast i32 {
    let x: fast i32 = 100
    x
}

fn get_float() -> f32 {
    let pi: f32 = 3.14f32
    pi
}

fn get_fast_float() -> fast f32<1000> {
    let val: fast f32<1000> = 2.5f32
    val
}

fn get_bool() -> bool {
    true
}

fn get_string() -> str {
    "Hello, DataRust!"
}

// ===== Test 2: Function ending with function call returns its result =====

fn b() -> i32 {
    42
}

fn a() -> i32 {
    b()
}

fn c(x: i32) -> i32 {
    let result: i32 = x + 1
    result
}

fn nested_b(x: i32) -> i32 {
    c(x)
}

fn nested_a() -> i32 {
    nested_b(5)
}

// ===== Test 3: Functions with parameters of any type =====

fn process_int(x: i32) -> i32 {
    let result: i32 = x + 1
    result
}

fn process_fast_float(y: fast f32<1000>) -> fast f32<1000> {
    let doubled: fast f32<1000> = y * 2.0f32
    doubled
}

fn process_mixed(a: i32, b: fast i32) -> i32 {
    let sum: i32 = a + b
    sum
}

// ===== Test 4: Execution contexts =====

fn greet_player() -> str {
    as @p {
        "Hello, nearest player!"
    }
}

fn teleport_and_count() -> fast i32 {
    at ~ ~10 ~ {
        let count: fast i32 = 42
        count
    }
}

fn move_all_cows() -> fast i32 {
    asat @e[type=cow] {
        let x: fast i32 = 100
        x
    }
}

// ===== Test 5: Complex function with calculations =====

fn calculate(a: i32, b: fast f32<1000>) -> fast f32<1000> {
    let a_as_float: fast f32<1000> = a as f32
    let result: fast f32<1000> = a_as_float + b
    result
}

// ===== Test 6: Function calling chain =====

fn level3() -> i32 {
    100
}

fn level2() -> i32 {
    level3()
}

fn level1() -> i32 {
    level2()
}

// ===== Test 7: Main entry point =====

fn main() {
    // Test simple calls
    let int_result: i32 = get_int()
    let fast_result: fast i32 = get_fast_int()
    
    // Test function call propagation
    let a_result: i32 = a()
    let nested_result: i32 = nested_a()
    
    // Test parameters
    let processed: i32 = process_int(10)
    
    // Test mixed types
    let mixed: i32 = process_mixed(5, 10)
    
    // Test calculations
    let calc_result: fast f32<1000> = calculate(5, 1.5f32)
    
    // Test call chain
    let chain_result: i32 = level1()
}
